// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  clerkId          String?  @unique
  role             Role     @default(USER)
  // Informations
  firstName        String?
  lastName         String?
  pseudo           String?  @unique
  phone            String?  @unique
  profilePicture   String?  @db.LongText
  coverPicture     String?  @db.LongText
  // Localisation
  country          String?
  state            String?
  city             String?
  address          String?
  // Informations complémentaires
  biography        String?  @db.LongText
  interests        String? 
  languages        String?
  // Identifiants
  email            String   @unique
  password         String
  isEmailConfirmed Boolean  @default(false)
  // Création, modification
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // Onboarding
  isOnboardingCompleted Boolean @default(false)
  // Maisons
  //! Un utilisateur peut avoir plusieurs maisons
  houses House[]

  
  Sessions          Session[]
  VerificationToken VerificationToken[]
  // Avis client
  // Opinions          Opinion[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  handle    String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model House {
  id          String   @id @default(uuid())
  // Localisation
  country     String
  state       String
  city        String
  address     String
  // Création, modification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  // Informations
  title       String?  @db.Text
  image       String
  description String?  @db.LongText
  // Propriétaire
  ownerId     String

  price      Int
  // Équipements etc...
  categories CategoriesOnHouses[]
  // equipments  Equipment @relation(fields: [equipmentId], references: [id])
  // equipmentId String
  // features    Feature   @relation(fields: [featureId], references: [id])
  // featureId   String
  // Avis client
  // Opinions    Opinion[]

  // Réservations
  //! Une maison peut avoir plusieurs réservations
  bookings Booking[]

  //! Une maison n'a qu'un seul propriétaire
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?

  // @@index([ownerId])
}

// model Opinion {
//   id       String @id @default(uuid())
//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String
//   house    House  @relation(fields: [houseId], references: [id], onDelete: Cascade)
//   houseId  String

//   @@index([authorId])
//   @@index([houseId])
// }

model Category {
  id        String               @id @default(uuid())
  name      String
  image     String?
  // Création, modification
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  // Maisons
  houses    CategoriesOnHouses[]
}

//! Many to many entre catégories et maisons
model CategoriesOnHouses {
  house      House    @relation(fields: [houseId], references: [id])
  houseId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([houseId, categoryId])
}

model Equipment {
  id   String  @id @default(uuid())
  name String
  logo String?
  // house House[]
}

// model Feature {
//   id       String @id @default(uuid())
//   name     String
//   quantity Int
//   house    House[]
// }

model Booking {
  id              String   @id @default(uuid())
  // Personne qui réserve
  userName        String
  userId          String
  userEmail       String
  // Maison réservée
  //! Une réservation n'a qu'une seule maison
  House           House?   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  houseId         String?
  // Propriétaire de la maison
  houseOwnerId    String
  // Dates de la réservation
  startDate       DateTime
  endDate         DateTime
  // Devise
  currency        String   @default("Euro")
  // Prix et status du paiement
  totalPrice      Int
  paymentStatus   Boolean  @default(false)
  paymentIntentId String   @unique
  // Date de la réservation
  bookedAt        DateTime @default(now())

  @@index([houseId])
}

enum Role {
  USER
  ADMIN
}
